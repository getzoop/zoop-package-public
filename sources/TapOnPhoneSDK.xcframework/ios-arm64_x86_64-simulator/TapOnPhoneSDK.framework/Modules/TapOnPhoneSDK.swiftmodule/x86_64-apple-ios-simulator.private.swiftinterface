// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios16.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TapOnPhoneSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import AVKit
import Combine
import CoreHaptics
import CoreTelephony
import Foundation
import Network
import ProximityReader
import Swift
import SwiftUI
import SystemConfiguration
@_exported import TapOnPhoneSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.lock
import os
public enum ErrorType {
  case initialize
  case payment
  case onboarding
  public static func == (a: TapOnPhoneSDK.ErrorType, b: TapOnPhoneSDK.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TapOnPhoneEnvironment : Swift.Equatable {
  case production
  case staging
  case custom(Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from string: Swift.String)
  public static func == (a: TapOnPhoneSDK.TapOnPhoneEnvironment, b: TapOnPhoneSDK.TapOnPhoneEnvironment) -> Swift.Bool
}
public struct PaymentApprovedResponse : Swift.Equatable, Swift.Hashable {
  public let transactionId: Swift.String
  public let cardBrand: Swift.String
  public let readerIdentifier: Swift.String?
  public let referenceId: Swift.String?
  public let readResultId: Swift.String
  public static func == (a: TapOnPhoneSDK.PaymentApprovedResponse, b: TapOnPhoneSDK.PaymentApprovedResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExternalSellerInformation : Swift.Equatable {
  public init(addressLine: Swift.String, softDescriptor: Swift.String, cpfCnpj: Swift.String, state: Swift.String, city: Swift.String, country: Swift.String, phoneNumber: Swift.String, zipCode: Swift.String, subMerchantId: Swift.String, merchantCategoryCode: Swift.String, name: Swift.String, voucherPv: Swift.String? = nil)
  public static func == (a: TapOnPhoneSDK.ExternalSellerInformation, b: TapOnPhoneSDK.ExternalSellerInformation) -> Swift.Bool
}
public struct ErrorResponse {
  public let type: TapOnPhoneSDK.ErrorType
  public let error: Any
}
public struct ConfigParameters {
  public init(credentials: TapOnPhoneSDK.TapOnPhoneCredentials, environment: TapOnPhoneSDK.TapOnPhoneEnvironment = .production, logLevel: TapOnPhoneSDK.TapOnPhoneLogLevel = .error, sdkConfig: TapOnPhoneSDK.SdkConfig = SdkConfig())
}
public class ScreenStateManager : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($currentStep) public var currentStep: TapOnPhoneSDK.ApplicationEvent {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $currentStep: Combine.Published<TapOnPhoneSDK.ApplicationEvent>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let config: TapOnPhoneSDK.SdkConfig
  public init(initialStep: TapOnPhoneSDK.ApplicationEvent, config: TapOnPhoneSDK.SdkConfig)
  public func updateStep(to step: TapOnPhoneSDK.ApplicationEvent)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SdkConfig {
  public init(theme: TapOnPhoneSDK.TapOnPhoneTheme = .init())
}
public struct PaymentErrorResponse : Swift.Equatable, Swift.Hashable, Swift.Error {
  public let error: TapOnPhoneSDK.TapOnPhoneError
  public let transactionId: Swift.String?
  public let cardBrand: Swift.String?
  public let readResultId: Swift.String?
  public static func == (a: TapOnPhoneSDK.PaymentErrorResponse, b: TapOnPhoneSDK.PaymentErrorResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TapOnPhoneErrorCode : Swift.Int {
  case unsupportedDeviceError
  case deviceNotReadyError
  case apiAuthenticationError
  case appleAccountNotLinked
  case appleAccountLinkError
  case transactionError
  case jailbrokenDeviceError
  case appleAccountAlreadyLinked
  case appleAccountLinkingFailed
  case appleAccountLinkingCancelled
  case appleAccountLinkingCheckFailed
  case appleAccountLinkRequiresiCloudSignIn
  case readerErrorNotAllowed
  case readerBackgroundRequestNotAllowed
  case readerUnsupported
  case readerOsVersionNotSupported
  case readerModelNotSupported
  case readerPasscodeDisabled
  case readerNetworkError
  case readerNetworkAuthenticationError
  case readerServiceConnectionError
  case emptyReaderToken
  case invalidReaderToken
  case readerPrepareFailed
  case readerPrepareExpired
  case readerTokenExpired
  case deviceBanned
  case readerMemoryFull
  case readerBusy
  case merchantBlocked
  case accountDeactivated
  case invalidMerchant
  case networkNotConnected
  case invalidAmountOrInstallments
  case readNotCompletedOrSessionEnded
  case readNotAllowed
  case readFromBackgroundError
  case noReaderSession
  case readerSessionExpired
  case readerSessionNetworkError
  case readerSessionAuthenticationError
  case readerSessionBusy
  case readCancelled
  case invalidAmount
  case invalidCurrencyCode
  case invalidPreferredAID
  case nfcDisabled
  case readNotAllowedDuringCall
  case passcodeDisabled
  case cardReadFailed
  case paymentReadFailed
  case paymentCardDeclined
  case pinEntryFailed
  case pinTokenInvalid
  case pinEntryTimeout
  case pinCancelled
  case pinNotAllowed
  case apiNetworkError
  case readerNotReady
  case readerUnknown
  case readerServiceError
  case invalidPaymentType
  case apiRequestTimedOut
  case invalidPaymentToken
  case animationFailed
  case cardReadExtractionFailed
  case expiredCard
  case invalidCard
  case invalidExternalSellerData
  case setConfigNotCalled
  case operationInProgress
  case inactiveCard
  case internalError
  case contentNotFound
  case contentDisplayFailed
  case systemBusy
  case unknown
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TapOnPhoneErrorSource : Swift.String {
  case api
  case apple
  case sdk
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ApplicationEvent : Swift.Hashable {
  case launchBuiltInScreen
  case closeBuiltInScreen
  case terminalActivationStarted
  case terminalActivationFinished
  case zoopActivationStarted
  case zoopActivationSucceeded
  case zoopActivationFailed
  case kernelActivationStarted
  case kernelActivationSucceeded
  case kernelActivationFailed
  case sessionActivationStarted
  case sessionActivationSucceeded
  case sessionActivationFailed
  case sessionActivationRetry
  case paymentProcessStarted
  case paymentProcessFinished
  case paymentProcessSucceeded
  case paymentProcessFailed
  case paymentConfirmationStarted
  case paymentConfirmationSucceeded
  case paymentConfirmationFailed
  case cardReadingStarted
  case cardReadingRetry
  case cardReadingFinished
  case pinInputStarted
  case pinInputFinished
  case authorizingPleaseWait
  case holdCardSteady
  case transactionAborted
  public static func == (a: TapOnPhoneSDK.ApplicationEvent, b: TapOnPhoneSDK.ApplicationEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TapOnPhonePaymentType : Swift.String {
  case credit
  case debit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TapOnPhoneTheme {
  public init(stepMessages: [TapOnPhoneSDK.ApplicationEvent : Swift.String] = [
                .terminalActivationStarted: "Iniciando",
                .authorizingPleaseWait: "Aguardando autorização",
                .transactionAborted: "Operação cancelada",
                .terminalActivationFinished: "Inicialização concluída",
                .cardReadingFinished: "Leitura concluída",
                .paymentProcessFinished: "Processamento concluído",
                .holdCardSteady: "Processando",
                .sessionActivationStarted: "Iniciando sessão",
                .zoopActivationStarted: "Autenticando",
                .zoopActivationSucceeded: "Autenticado",
                .cardReadingStarted: "Processando",
                .closeBuiltInScreen: "Processando",
                .pinInputStarted: "Digite o PIN",
                .pinInputFinished: "PIN confirmado"
        ], stepViews: [TapOnPhoneSDK.ApplicationEvent : SwiftUICore.AnyView] = [:], textColor: SwiftUICore.Color = .white, loadingColor: SwiftUICore.Color = .white, gradientStops: [SwiftUICore.Gradient.Stop] = [
            .init(color: .black.opacity(0.8), location: 0.0),
            .init(color: .black.opacity(0.75), location: 0.39),
            .init(color: .black.opacity(0.65), location: 0.61),
            .init(color: .black.opacity(0.35), location: 0.83),
            .init(color: .black.opacity(0), location: 1.0),
        ])
}
public enum TapOnPhoneLogLevel : Swift.Int {
  case information
  case warning
  case error
  case critical
  case log
  case debug
  case trace
  case metric
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class TapOnPhoneCredentials {
  public init(marketplace: Swift.String, seller: Swift.String, accessKey: Swift.String)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct SdkScreen : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(stateManager: TapOnPhoneSDK.ScreenStateManager)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13TapOnPhoneSDK9SdkScreenV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class EventState {
  public static func showLoading(initialStep: TapOnPhoneSDK.ApplicationEvent, config: TapOnPhoneSDK.SdkConfig, onEvent: ((TapOnPhoneSDK.ApplicationEvent) -> Swift.Void)? = nil)
  public static func updateStep(to newStep: TapOnPhoneSDK.ApplicationEvent)
  public static func hideLoading(_ onEvent: ((TapOnPhoneSDK.ApplicationEvent) -> Swift.Void)? = nil)
  @objc deinit
}
public struct TapOnPhoneError : Swift.Equatable, Swift.Error, Swift.Hashable {
  public let code: TapOnPhoneSDK.TapOnPhoneErrorCode
  public let source: TapOnPhoneSDK.TapOnPhoneErrorSource
  public let message: Swift.String
  public let description: Swift.String?
  public let readerIdentifier: Swift.String?
  public let timestamp: Swift.Double
  public static func == (a: TapOnPhoneSDK.TapOnPhoneError, b: TapOnPhoneSDK.TapOnPhoneError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PaymentRequest : Swift.Equatable {
  public let amount: Swift.Int
  public let paymentType: TapOnPhoneSDK.TapOnPhonePaymentType
  public let installments: Swift.Int
  public let metadata: Swift.String?
  public let referenceId: Swift.String?
  public let externalSeller: TapOnPhoneSDK.ExternalSellerInformation?
  public init(amount: Swift.Int, paymentType: TapOnPhoneSDK.TapOnPhonePaymentType, installments: Swift.Int = 1, metadata: Swift.String? = nil, referenceId: Swift.String? = nil, externalSeller: TapOnPhoneSDK.ExternalSellerInformation? = nil)
  public static func == (a: TapOnPhoneSDK.PaymentRequest, b: TapOnPhoneSDK.PaymentRequest) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class TapOnPhone {
  public static func setConfig(configParameters: TapOnPhoneSDK.ConfigParameters)
  public static func initialize(onSuccess: @escaping () -> Swift.Void, onError: @escaping (TapOnPhoneSDK.ErrorResponse) -> Swift.Void, onEvent: @escaping (TapOnPhoneSDK.ApplicationEvent) -> Swift.Void)
  public static func pay(payRequest: TapOnPhoneSDK.PaymentRequest, onSuccess: @escaping (TapOnPhoneSDK.PaymentApprovedResponse) -> Swift.Void, onError: @escaping (TapOnPhoneSDK.ErrorResponse) -> Swift.Void, onEvent: @escaping (TapOnPhoneSDK.ApplicationEvent) -> Swift.Void)
  public static func payByGateway(payRequest: TapOnPhoneSDK.PaymentRequest, onSuccess: @escaping (TapOnPhoneSDK.PaymentApprovedResponse) -> Swift.Void, onError: @escaping (TapOnPhoneSDK.ErrorResponse) -> Swift.Void, onEvent: @escaping (TapOnPhoneSDK.ApplicationEvent) -> Swift.Void)
  public static func processOnboarding(viewController: UIKit.UIViewController, onError: @escaping (TapOnPhoneSDK.ErrorResponse) -> Swift.Void)
  public static func activateSession(onSuccess: @escaping (Swift.String) -> Swift.Void, onError: @escaping (TapOnPhoneSDK.TapOnPhoneError) -> Swift.Void, onEvent: @escaping (TapOnPhoneSDK.ApplicationEvent) -> Swift.Void)
  public static func getVersion() -> Swift.String
  @objc deinit
}
extension TapOnPhoneSDK.ErrorType : Swift.Equatable {}
extension TapOnPhoneSDK.ErrorType : Swift.Hashable {}
extension TapOnPhoneSDK.TapOnPhoneErrorCode : Swift.Equatable {}
extension TapOnPhoneSDK.TapOnPhoneErrorCode : Swift.Hashable {}
extension TapOnPhoneSDK.TapOnPhoneErrorCode : Swift.RawRepresentable {}
extension TapOnPhoneSDK.TapOnPhoneErrorSource : Swift.Equatable {}
extension TapOnPhoneSDK.TapOnPhoneErrorSource : Swift.Hashable {}
extension TapOnPhoneSDK.TapOnPhoneErrorSource : Swift.RawRepresentable {}
extension TapOnPhoneSDK.TapOnPhonePaymentType : Swift.Equatable {}
extension TapOnPhoneSDK.TapOnPhonePaymentType : Swift.Hashable {}
extension TapOnPhoneSDK.TapOnPhonePaymentType : Swift.RawRepresentable {}
extension TapOnPhoneSDK.TapOnPhoneLogLevel : Swift.Equatable {}
extension TapOnPhoneSDK.TapOnPhoneLogLevel : Swift.Hashable {}
extension TapOnPhoneSDK.TapOnPhoneLogLevel : Swift.RawRepresentable {}
extension TapOnPhoneSDK.SdkScreen : Swift.Sendable {}
